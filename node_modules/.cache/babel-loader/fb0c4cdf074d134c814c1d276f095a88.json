{"ast":null,"code":"import _objectSpread from\"D:\\\\messenger\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"D:\\\\messenger\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\messenger\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{userConstants}from\"./constants\";import{firestore}from'firebase';export var getRealtimeUsers=function getRealtimeUsers(uid){//console.log('uid', uid)\nreturn/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var db,unsubscribe;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:\"\".concat(userConstants.GET_REALTIME_USERS,\"_REQUEST\")});db=firestore();unsubscribe=db.collection(\"users\")//.where(\"uid\", \"!=\", uid)\n.onSnapshot(function(querySnapshot){var users=[];querySnapshot.forEach(function(doc){if(doc.data().uid!=uid){users.push(doc.data());}});//console.log(users);\ndispatch({type:\"\".concat(userConstants.GET_REALTIME_USERS,\"_SUCCESS\"),payload:{users:users}});});return _context.abrupt(\"return\",unsubscribe);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateMessage=function updateMessage(msgObj){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var db;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:db=firestore();db.collection('conversations').add(_objectSpread(_objectSpread({},msgObj),{},{isView:false,createdAt:new Date()})).then(function(data){console.log(data);//success\n// dispatch({\n//     type: userConstants.GET_REALTIME_MESSAGES,\n// })\n}).catch(function(error){console.log(error);});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var getRealtimeConversations=function getRealtimeConversations(user){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var db;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:db=firestore();db.collection('conversations').where('user_uid_1','in',[user.uid_1,user.uid_2]).orderBy('createdAt','asc').onSnapshot(function(querySnapshot){var conversations=[];querySnapshot.forEach(function(doc){if(doc.data().user_uid_1==user.uid_1&&doc.data().user_uid_2==user.uid_2||doc.data().user_uid_1==user.uid_2&&doc.data().user_uid_2==user.uid_1){conversations.push(doc.data());}// if(conversations.length > 0){\n// }else{\n//     dispatch({\n//         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n//         payload: { conversations }\n//     })\n// }\n});dispatch({type:userConstants.GET_REALTIME_MESSAGES,payload:{conversations:conversations}});console.log(conversations);});//user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\ncase 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};","map":{"version":3,"sources":["D:/messenger/src/actions/user.actions.js"],"names":["userConstants","firestore","getRealtimeUsers","uid","dispatch","type","GET_REALTIME_USERS","db","unsubscribe","collection","onSnapshot","querySnapshot","users","forEach","doc","data","push","payload","updateMessage","msgObj","add","isView","createdAt","Date","then","console","log","catch","error","getRealtimeConversations","user","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","GET_REALTIME_MESSAGES"],"mappings":"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","sourcesContent":["import { userConstants } from \"./constants\";\nimport { firestore } from 'firebase';\n\nexport const getRealtimeUsers = (uid) => {\n\n    //console.log('uid', uid)\n\n    return async (dispatch) => {\n\n        dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\n\n        const db = firestore();\n        const unsubscribe = db.collection(\"users\")\n            //.where(\"uid\", \"!=\", uid)\n            .onSnapshot((querySnapshot) => {\n                const users = [];\n                querySnapshot.forEach(function (doc) {\n                    if (doc.data().uid != uid) {\n                        users.push(doc.data());\n                    }\n                });\n                //console.log(users);\n\n                dispatch({\n                    type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n                    payload: { users }\n                });\n\n            });\n\n        return unsubscribe;\n\n    }\n\n}\n\nexport const updateMessage = (msgObj) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n            .add({\n                ...msgObj,\n                isView: false,\n                createdAt: new Date()\n            })\n            .then((data) => {\n                console.log(data)\n                //success\n                // dispatch({\n                //     type: userConstants.GET_REALTIME_MESSAGES,\n                // })\n\n\n            })\n            .catch(error => {\n                console.log(error)\n            });\n\n    }\n}\n\nexport const getRealtimeConversations = (user) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n            .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\n            .orderBy('createdAt', 'asc')\n            .onSnapshot((querySnapshot) => {\n\n                const conversations = [];\n\n                querySnapshot.forEach(doc => {\n\n                    if (\n                        (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\n                        ||\n                        (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)\n                    ) {\n                        conversations.push(doc.data())\n                    }\n\n\n\n                    // if(conversations.length > 0){\n\n                    // }else{\n                    //     dispatch({\n                    //         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n                    //         payload: { conversations }\n                    //     })\n                    // }\n\n\n\n\n                });\n\n                dispatch({\n                    type: userConstants.GET_REALTIME_MESSAGES,\n                    payload: { conversations }\n                })\n\n                console.log(conversations);\n            })\n        //user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n\n\n    }\n}"]},"metadata":{},"sourceType":"module"}