{"ast":null,"code":"import { userConstants } from \"./constants\"; // import * as  firestore  from \"@firebase/firestore\";\n\nimport { firestore } from 'firebase';\nexport const getRealtimeUsers = uid => {\n  //console.log('uid', uid)\n  return async dispatch => {\n    dispatch({\n      type: `${userConstants.GET_REALTIME_USERS}_REQUEST`\n    });\n    const db = firestore();\n    const unsubscribe = db.collection(\"users\") //.where(\"uid\", \"!=\", uid)\n    .onSnapshot(querySnapshot => {\n      const users = [];\n      querySnapshot.forEach(function (doc) {\n        if (doc.data().uid != uid) {\n          users.push(doc.data());\n        }\n      }); //console.log(users);\n\n      dispatch({\n        type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n        payload: {\n          users\n        }\n      });\n    });\n    return unsubscribe;\n  };\n};\nexport const updateMessage = msgObj => {\n  return async dispatch => {\n    const db = firestore();\n    db.collection('conversations').add({ ...msgObj,\n      isView: false,\n      createdAt: new Date()\n    }).then(data => {\n      console.log(data); //success\n      // dispatch({\n      //     type: userConstants.GET_REALTIME_MESSAGES,\n      // })\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getRealtimeConversations = user => {\n  return async dispatch => {\n    const db = firestore();\n    db.collection('conversations').where('user_uid_1', 'in', [user.uid_1, user.uid_2]).orderBy('createdAt', 'asc').onSnapshot(querySnapshot => {\n      const conversations = [];\n      querySnapshot.forEach(doc => {\n        if (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2 || doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1) {\n          conversations.push(doc.data());\n        } // if(conversations.length > 0){\n        // }else{\n        //     dispatch({\n        //         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n        //         payload: { conversations }\n        //     })\n        // }\n\n      });\n      dispatch({\n        type: userConstants.GET_REALTIME_MESSAGES,\n        payload: {\n          conversations\n        }\n      });\n      console.log(conversations);\n    }); //user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n  };\n};","map":{"version":3,"sources":["D:/messenger/src/actions/user.actions.js"],"names":["userConstants","firestore","getRealtimeUsers","uid","dispatch","type","GET_REALTIME_USERS","db","unsubscribe","collection","onSnapshot","querySnapshot","users","forEach","doc","data","push","payload","updateMessage","msgObj","add","isView","createdAt","Date","then","console","log","catch","error","getRealtimeConversations","user","where","uid_1","uid_2","orderBy","conversations","user_uid_1","user_uid_2","GET_REALTIME_MESSAGES"],"mappings":"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","sourcesContent":["import { userConstants } from \"./constants\";\n// import * as  firestore  from \"@firebase/firestore\";\nimport { firestore } from 'firebase';\n\nexport const getRealtimeUsers = (uid) => {\n\n    //console.log('uid', uid)\n\n    return async (dispatch) => {\n\n        dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\n\n        const db = firestore();\n        const unsubscribe = db.collection(\"users\")\n            //.where(\"uid\", \"!=\", uid)\n            .onSnapshot((querySnapshot) => {\n                const users = [];\n                querySnapshot.forEach(function (doc) {\n                    if (doc.data().uid != uid) {\n                        users.push(doc.data());\n                    }\n                });\n                //console.log(users);\n\n                dispatch({\n                    type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n                    payload: { users }\n                });\n\n            });\n\n        return unsubscribe;\n\n    }\n\n}\n\nexport const updateMessage = (msgObj) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n            .add({\n                ...msgObj,\n                isView: false,\n                createdAt: new Date()\n            })\n            .then((data) => {\n                console.log(data)\n                //success\n                // dispatch({\n                //     type: userConstants.GET_REALTIME_MESSAGES,\n                // })\n\n\n            })\n            .catch(error => {\n                console.log(error)\n            });\n\n    }\n}\n\nexport const getRealtimeConversations = (user) => {\n    return async dispatch => {\n\n        const db = firestore();\n        db.collection('conversations')\n            .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\n            .orderBy('createdAt', 'asc')\n            .onSnapshot((querySnapshot) => {\n\n                const conversations = [];\n\n                querySnapshot.forEach(doc => {\n\n                    if (\n                        (doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\n                        ||\n                        (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)\n                    ) {\n                        conversations.push(doc.data())\n                    }\n\n\n\n                    // if(conversations.length > 0){\n\n                    // }else{\n                    //     dispatch({\n                    //         type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\n                    //         payload: { conversations }\n                    //     })\n                    // }\n\n\n\n\n                });\n\n                dispatch({\n                    type: userConstants.GET_REALTIME_MESSAGES,\n                    payload: { conversations }\n                })\n\n                console.log(conversations);\n            })\n        //user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n\n\n    }\n}"]},"metadata":{},"sourceType":"module"}