{"ast":null,"code":"var _jsxFileName = \"D:\\\\messenger\\\\src\\\\containers\\\\HomePage\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport './style.css';\nimport Layout from '../../components/Layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\n\nconst User = props => {\n  const {\n    user,\n    onClick\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onClick(user),\n    className: \"displayName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayPic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'space-between',\n      margin: '0 10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }\n  }, user.firstName, \" \", user.lastName), /*#__PURE__*/React.createElement(\"span\", {\n    className: user.isOnline ? `onlineStatus` : `onlineStatus off`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 23\n    }\n  })));\n};\n\nconst HomePage = props => {\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n  const user = useSelector(state => state.user);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatUser, setChatUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [userUid, setUserUid] = useState(null);\n  let unsubscribe;\n  useEffect(() => {\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid)).then(unsubscribe => {\n      return unsubscribe;\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []); //console.log(user);\n  //componentWillUnmount\n\n  useEffect(() => {\n    return () => {\n      //cleanup\n      unsubscribe.then(f => f()).catch(error => console.log(error));\n    };\n  }, []);\n\n  const initChat = user => {\n    setChatStarted(true);\n    setChatUser(`${user.firstName} ${user.lastName}`);\n    setUserUid(user.uid);\n    console.log(user);\n    dispatch(getRealtimeConversations({\n      uid_1: auth.uid,\n      uid_2: user.uid\n    }));\n  };\n\n  const submitMessage = e => {\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: userUid,\n      message\n    };\n\n    if (message !== \"\") {\n      dispatch(updateMessage(msgObj)).then(() => {\n        setMessage('');\n      });\n    } //console.log(msgObj);\n\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listOfUsers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, user.users.length > 0 ? user.users.map(user => {\n    return /*#__PURE__*/React.createElement(User, {\n      onClick: initChat,\n      key: user.uid,\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatArea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, chatStarted ? chatUser : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageSections\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, chatStarted ? user.conversations.map(con => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"messageStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, con.message))) : null), chatStarted ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatControls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    placeholder: \"Write Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: submitMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"Send\")) : null)));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["D:/messenger/src/containers/HomePage/index.js"],"names":["React","useEffect","useState","Layout","useDispatch","useSelector","getRealtimeUsers","updateMessage","getRealtimeConversations","User","props","user","onClick","display","flex","justifyContent","margin","fontWeight","firstName","lastName","isOnline","HomePage","dispatch","auth","state","chatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","unsubscribe","uid","then","catch","error","console","log","f","initChat","uid_1","uid_2","submitMessage","e","msgObj","user_uid_1","user_uid_2","users","length","map","conversations","con","textAlign","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './style.css';\r\nimport Layout from '../../components/Layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\r\n\r\n\r\nconst User = (props) => {\r\n\r\n\r\n  const {user, onClick} = props;\r\n\r\n  return (\r\n    <div onClick={() => onClick(user)} className=\"displayName\">\r\n                  <div className=\"displayPic\">\r\n                      <img src=\"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\" alt=\"\" />\r\n                  </div>\r\n                  <div style={{ display: 'flex', flex: 1, justifyContent: 'space-between', margin: '0 10px'}}>\r\n                      <span style={{fontWeight: 500}}>{user.firstName} {user.lastName}</span>\r\n                      <span className={user.isOnline ? `onlineStatus` : `onlineStatus off`}></span>\r\n                  </div>\r\n              </div>\r\n  );\r\n}\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector(state => state.auth);\r\n  const user = useSelector(state => state.user);\r\n  const [chatStarted, setChatStarted] = useState(false);\r\n  const [chatUser, setChatUser] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [userUid, setUserUid] = useState(null);\r\n  let unsubscribe;\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid))\r\n    .then(unsubscribe => {\r\n      return unsubscribe;\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n\r\n    \r\n\r\n\r\n  }, []);\r\n\r\n  //console.log(user);\r\n\r\n  //componentWillUnmount\r\n  useEffect(() => {\r\n    return () => {\r\n      //cleanup\r\n      unsubscribe.then(f => f()).catch(error => console.log(error));\r\n\r\n    }\r\n  }, []);\r\n\r\n\r\n  const initChat = (user) => {\r\n\r\n    setChatStarted(true)\r\n    setChatUser(`${user.firstName} ${user.lastName}`)\r\n    setUserUid(user.uid);\r\n\r\n    console.log(user);\r\n\r\n    dispatch(getRealtimeConversations({ uid_1: auth.uid, uid_2: user.uid }));\r\n\r\n  }\r\n\r\n  const submitMessage = (e) => {\r\n\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: userUid,\r\n      message\r\n    }\r\n\r\n\r\n    if(message !== \"\"){\r\n      dispatch(updateMessage(msgObj))\r\n      .then(() => {\r\n        setMessage('')\r\n      });\r\n    }\r\n\r\n    //console.log(msgObj);\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Layout>\r\n      <section className=\"container\">\r\n\r\n        <div className=\"listOfUsers\">\r\n\r\n\r\n          {\r\n            user.users.length > 0 ?\r\n            user.users.map(user => {\r\n              return (\r\n                <User \r\n                  onClick={initChat}\r\n                  key={user.uid} \r\n                  user={user} \r\n                  />\r\n              );\r\n            }) : null\r\n          }\r\n\r\n            \r\n                    \r\n        </div>\r\n\r\n        <div className=\"chatArea\">\r\n            \r\n            <div className=\"chatHeader\"> \r\n            {\r\n              chatStarted ? chatUser : ''\r\n            }\r\n            </div>\r\n            <div className=\"messageSections\">\r\n                {\r\n                  chatStarted ? \r\n                  user.conversations.map(con =>\r\n                    <div style={{ textAlign: con.user_uid_1 == auth.uid ? 'right' : 'left' }}>\r\n                    <p className=\"messageStyle\" >{con.message}</p>\r\n                  </div> )\r\n                  : null\r\n                }\r\n                \r\n\r\n            </div>\r\n            {\r\n              chatStarted ? \r\n              <div className=\"chatControls\">\r\n                <textarea \r\n                  value={message}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                  placeholder=\"Write Message\"\r\n                />\r\n                <button onClick={submitMessage}>Send</button>\r\n            </div> : null\r\n            }\r\n            \r\n        </div>\r\n    </section>\r\n  </Layout>\r\n  );\r\n}\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}